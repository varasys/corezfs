#!/usr/bin/env bash

# this script was originally written for ZFS 0.7.1 and CoreOS 1465.7.0
# this should work with any versions though unless upstream changes break it

version="v2.0.0"

yell() { echo "$(basename $0): $*" >&2; }
die() { yell "FATAL $*"; [ ${debug} ] && bash --login || exit 111; }
try() { yell ${1}; shift; "$@" || die "ERROR executing: $*"; }

[ ${ZFS_VERSION:=$(curl -s https://api.github.com/repos/zfsonlinux/zfs/releases/latest | jq -r ".tag_name" 2> /dev/null)} ] \
|| die "failed to query latest zfs version"

ZFS_VERSION=${ZFS_VERSION#zfs-}
yell "building ZFS on Linux v${ZFS_VERSION}"

. /usr/share/coreos/release
. /usr/share/coreos/update.conf

VERSION="${COREOS_RELEASE_BOARD}_${COREOS_RELEASE_VERSION}_${GROUP:=stable}"
ARCHIVE="corezfs_${VERSION}.tar.gz"

read -d '' help_message <<-EOF

	corezfs (${version}) https://github.com/varasys/corezfs
	
	Bash script to build ZFS on Linux (ZoL) on CoreOS
	
	Usage:
	    corezfs build [archive_file]
	    corezfs install [archive_file]
	    corezfs -h | -v

	Options:
	    -h ) echo this help file to stdout
	    -v ) echo corezfs version to stdout	

	The build command will build zfs and create the archive file which is an
	overlay for the "/usr" filesystem. The default archive_file is
	"./${ARCHIVE}". The archive file should be installed to the target system
	using the install command. The install command builds an archive file
	automatically if it doesn't exist, so the build command is only required
	to build the archive on a system it will not be installed on.
	
	The archive file can be used to install the zfs binaries on other systems
	instead of building it each time.

	The install command will build the archive file if it doesn't exist and
	then extracts the archive file including the overlay to /opt/corezfs and
	some configuration files into /etc, and starts the relevant systemd
	services (including a zfs-overlay.service to mount the overlay).

	By default, the script will query the ZoL github repository for the latest
	released version. The ZoL version may be specified manually by setting the
	ZFS_VERSION environment variable (ie. "ZFS_VERSION=0.7.1 corezfs install").

	This is meant to be built and installed on a clean CoreOS instance.

	This script was originally written and tested on CoreOS 1465.7.0 and
	ZFS on Linux v0.7.1, but should work on other versions unless upstream
	changes break the script.

EOF

while getopts ":dhv" flag; do
	case ${flag} in
		d )	yell "running in debug mode"; debug="true";;
		h ) echo "${help_message}"; exit 0;;
		v ) echo "${version}"; exit 0;;
		\? ) die "Invalid option: -${OPTARG}";;
	esac
done
shift $((OPTIND-1))
[ ${2} ] && ARCHIVE=${2}

[ ${EUID} -eq 0 ] || die "must be run as root user"


read -d '' build_script <<-'EOF'
	#!/usr/bin/env bash

	yell() { echo "$(basename $0): $*" >&2; }
	die() { yell "FATAL $*"; [ ${debug} ] && bash --login || exit 111; }
	try() { mesg=${1}; yell ${mesg}; shift; "$@" || die "ERROR executing: $*"; }

	try "sourcing /usr/share/coreos/release" \
		. /usr/share/coreos/release

	try "emerging gitclone"
		emerge-gitclone

	try "checking out coreos-overlay" \
		git -C /var/lib/portage/coreos-overlay checkout build-${COREOS_RELEASE_VERSION%%.*}

	try "emerging coreos-sources" \
		emerge -v coreos-sources
	
	try "copying /proc/config.gz to /usr/src/linux/.config" \
		gzip -cd /proc/config.gz > /usr/src/linux/.config
	
	try "preparing modules" \
		make -C /usr/src/linux modules_prepare

	try "creating /usr/local/portage/sys-fs/{zfs,spl}" \
		mkdir -p /usr/local/portage/{metadata,profiles,sys-fs/{zfs,spl}}

	cat > /etc/portage/repos.conf/localrepo.conf <<-EOF2
		[localrepo]
		location = /usr/local/portage
	EOF2

	echo "localrepo" > /usr/local/portage/profiles/repo_name

	cat > /usr/local/portage/metadata/layout.conf <<-EOF2
		masters = portage-stable
		auto-sync = false
	EOF2

	cat > /usr/local/portage/sys-fs/spl/spl-${ZFS_VERSION}.ebuild <<-'EOF2'
		EAPI=6

		DESCRIPTION="SPL shim for ZFS on Linux (ZoL)"
		HOMEPAGE="http://zfsonlinux.org"
		SRC_URI="https://github.com/zfsonlinux/zfs/releases/download/zfs-${PV}/${PF}.tar.gz"

		LICENSE="CCDL"
		SLOT="0"
		KEYWORDS="amd64 x86"
		#TODO ZoL requires the following ARCH hack to compile modules as of 0.7.1 (may not be needed for future releases)
		ARCH="x86"
	EOF2

	cat > /usr/local/portage/sys-fs/zfs/zfs-${ZFS_VERSION}.ebuild <<-'EOF2'
		EAPI=6

		DESCRIPTION="ZFS on Linux (ZoL)"
		HOMEPAGE="http://zfsonlinux.org"
		SRC_URI="https://github.com/zfsonlinux/zfs/releases/download/zfs-${PV}/${PF}.tar.gz"

		LICENSE="CCDL"
		SLOT="0"
		KEYWORDS="amd64 x86"
		#TODO ZoL requires the following ARCH hack to compile modules as of 0.7.1 (may not be needed for future releases)
		ARCH="x86"

		DEPEND="sys-fs/spl"
		RDEPEND="${DEPEND}"

		source_configure() {
			econf \
				--disable-sysvinit \
				--with-systemdunitdir=/etc/systemd/system \
				--with-systemdpresetdir=/etc/systemd/system-preset
		}
	EOF2

	yell "Creating Systemd Unit Files"
	cat > /corezfs/usr/lib64/systemd/system/zfs-overlay.service <<-EOF2
		[Unit]
		Description=CoreZFS /usr overlay
		DefaultDependencies=no
		ConditionPathExists=/opt/corezfs/usr
		Before=zfs-import-cache.service
		Before=zfs-import-scan.service
		Before=zfs-mount.service
		Before=zfs-share.service
		Before=zfs-zed.service
		Before=zfs.target

		[Service]
		Type=oneshot
		RemainAfterExit=yes
		ExecStart=/usr/bin/mount -t overlay overlay -o lowerdir=/opt/corezfs/usr:/usr /usr
		ExecStartPost=/usr/sbin/modprobe zfs

		[Install]
		RequiredBy=zfs.target
	EOF2

	cat > /corezfs/usr/lib64/systemd/system-preset/30-corezfs.preset <<-EOF2
		enable zfs-overlay.service
	EOF2

	try "generating spl manifest" \
		ebuild /usr/local/portage/sys-fs/spl/spl-${ZFS_VERSION}.ebuild manifest
	try "generating zfs manifest" \
		ebuild /usr/local/portage/sys-fs/zfs/zfs-${ZFS_VERSION}.ebuild manifest

	try "building ZFS on Linux (ZoL) for CoreOS" emerge --root=/corezfs --oneshot zfs

	try "running depmod" chroot /corezfs depmod
	try "running ldconfig" chroot /corezfs ldconfig -v

	yell "finished building ZFS on Linux (ZoL) overlay for CoreOS"
EOF

case "$1" in
	build)
		yell "Building ZFS on Linux (ZoL) for CoreOS ($VERSION)"
		yell "target archive file: ${ARCHIVE}"

		try "creating build directory ${CZ_BUILD_DIR:="/opt/corezfs_build"}" \
			mkdir -p ${CZ_BUILD_DIR} && CZ_BUILD_DIR=$(cd ${CZ_BUILD_DIR}; pwd)
		try "creating overlay directory ${CZ_OVERLAY_DIR:=${CZ_BUILD_DIR}/overlay}" \
			mkdir -p ${CZ_OVERLAY_DIR}/opt/corezfs/usr && CZ_OVERLAY_DIR=$(cd ${CZ_OVERLAY_DIR}; pwd)

		try "preparing build script" \
			echo "${build_script}" > "${CZ_OVERLAY_DIR}/opt/corezfs/build-zfs.sh"
		try "setting build script executable" \
			chmod +x "${CZ_OVERLAY_DIR}/opt/corezfs/build-zfs.sh"

		DEVENV="coreos_${VERSION}.bin"
		if [ ! -r "${CZ_BUILD_DIR}/${DEVENV}" ]; then
			try "refreshing CoreOS signing key" \
				gpg2 --keyserver pgp.mit.edu --recv-keys 50E0885593D2DCB4

			if [ ! -r "${CZ_BUILD_DIR}/${DEVENV}.bz2" ]; then
				DEVREPO="https://${GROUP}.release.core-os.net/${COREOS_RELEASE_BOARD}/${COREOS_RELEASE_VERSION}/coreos_developer_container.bin.bz2"
				try "downloading CoreOS development container" \
					curl -L "${DEVREPO}" > "${CZ_BUILD_DIR}/${DEVENV}.bz2"
			fi

			try "verifying development container signature" \
				gpg2 --verify <(try "downloading signature" curl -L "${DEVREPO}.sig") "${CZ_BUILD_DIR}/${DEVENV}.bz2"

			try "decompressing development container (this may take awhile)" \
				bunzip2 -fv "${CZ_BUILD_DIR}/${DEVENV}.bz2" > "${CZ_BUILD_DIR}/${DEVENV}"
		fi

		try "allocating swap file" fallocate -l 1024m ${CZ_BUILD_DIR}/swap
		trap "{ swapoff ${CZ_BUILD_DIR}/swap; rm ${CZ_BUILD_DIR}/swap; }" EXIT
		try "setting swap file permissions" chmod 600 ${CZ_BUILD_DIR}/swap
		try "initializing swap file" mkswap ${CZ_BUILD_DIR}/swap
		try "activating swap" swapon ${CZ_BUILD_DIR}/swap
		
		try "launching development container" \
			systemd-nspawn \
				--image="${CZ_BUILD_DIR}/${DEVENV}" \
				--ephemeral \
				--setenv="debug=${debug}" \
				--setenv="ZFS_VERSION=${ZFS_VERSION}" \
				--setenv="CZ_SPLREPO=${CZ_SPLREPO:=https://api.github.com/repos/zfsonlinux/spl/tarball}" \
				--setenv="CZ_ZFSREPO=${CZ_ZFSREPO:=https://api.github.com/repos/zfsonlinux/zfs/tarball}" \
				--overlay="/:${CZ_OVERLAY_DIR}/opt/corezfs:/corezfs" \
				--overlay="/usr:${CZ_OVERLAY_DIR}/opt/corezfs/usr:/corezfs/usr" \
				--as-pid2 \
				/corezfs/build-zfs.sh

		try "transferring systemd unit files to /etc/systemd" \
			cp --update --recursive ${CZ_OVERLAY_DIR}/opt/corezfs/usr/lib64/systemd ${CZ_OVERLAY_DIR}/opt/corezfs/etc/

		try "creating ${ARCHIVE} tarball" \
			tar -zcvf "${ARCHIVE}" -C "${CZ_OVERLAY_DIR}" opt/corezfs/usr -C "${CZ_OVERLAY_DIR}/opt/corezfs" etc

		[ ${debug} ] || try "cleaning up temporary build directories" \
			rm -rf "${CZ_OVERLAY_DIR}" "${CZ_BUILD_DIR}"

		cat >&2 <<-EOF
			
			Finished Building ZFS on Linux (ZoL) for CoreOS ($VERSION)
			
			Archive file: ${ARCHIVE}
			
			Run "corezfs install ${ARCHIVE}" to install

		EOF
		;;
	install)
		yell "Installing ZFS on Linux (ZoL) for CoreOS ($VERSION)"

		[ -r ${ARCHIVE} ] || try "no archive file available; building one ..." ${0} ${debug:+"-d"} build ${ARCHIVE}

		try "extracting ${ARCHIVE}" \
			tar -zxvf ${ARCHIVE} -C /
		try "enabling zfs-overlay.service" \
			systemctl enable --now zfs-overlay.service
		try "presetting systemd units" \
			systemctl preset-all --now

		yell "Finished Installing ZFS on Linux (ZoL) for CoreOS ($VERSION)"
		;;
	*)
		die "unknown sub-command \"${1}\" (run \"$(basename ${0}) -h\" for help)"
		;;
esac
